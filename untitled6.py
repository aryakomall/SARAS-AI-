# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ePg4yb9j7Kr7uLOM20nFlwKtURX82Tkf
"""

import warnings
warnings.filterwarnings('ignore')
import pandas as pd
import re
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
import matplotlib.pyplot as plt
from wordcloud import WordCloud

import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords

data = pd.read_csv('/content/article_data - Sheet1.csv')
data.head()

# unique ratings
pd.unique(data['Biasness'])

data.columns

sns.countplot(data=data,
			x='Biasness',
			order=data.Biasness.value_counts().index)

from tqdm import tqdm


def preprocess_text(text_data):
	preprocessed_text = []

	for sentence in tqdm(text_data):
		# Removing punctuations
		sentence = re.sub(r'[^\w\s]', '', sentence)

		# Converting lowercase and removing stopwords
		preprocessed_text.append(' '.join(token.lower()
										for token in nltk.word_tokenize(sentence)
										if token.lower() not in stopwords.words('english')))

	return preprocessed_text

import nltk

# Download the punkt tokenizer
nltk.download('punkt')

# Assuming you have a preprocess_text function defined, you can now use it
preprocessed_review = preprocess_text(data['text'].values)
data['text'] = preprocessed_review

data.head()

data["Biasness"].value_counts()

# Consolidate the text for biased articles
consolidated = ' '.join(word for word in data['text'][data['Biasness'] == "left"].astype(str))

# Check if there is any text to generate the word cloud
if consolidated.strip():  # This checks if 'consolidated' is not empty or just whitespace
    wordCloud = WordCloud(width=1600, height=800, random_state=21, max_font_size=110)
    plt.figure(figsize=(15, 10))
    plt.imshow(wordCloud.generate(consolidated), interpolation='bilinear')
    plt.axis('off')
    plt.show()
else:
    print("No biased text data available to generate a WordCloud.")

cv = TfidfVectorizer(max_features=2500)
X = cv.fit_transform(data['text'] ).toarray()

X

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, data['Biasness'],
													test_size=0.33,
													stratify=data['Biasness'],
													random_state = 42)

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score  # Importing accuracy_score

# Creating the model
model = DecisionTreeClassifier(random_state=0)
model.fit(X_train, y_train)

# Testing the model
pred = model.predict(X_train)
print(accuracy_score(y_train, pred))

# Check the unique classes in the y_train data
unique_classes = sorted(list(set(y_train)))

# Compute confusion matrix
cm = confusion_matrix(y_train, pred)

# Display confusion matrix
cm_display = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=unique_classes)
cm_display.plot()
plt.show()